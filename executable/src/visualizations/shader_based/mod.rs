mod bda_compute;
mod bda_immediate;
mod resolution_uniform;
mod target_distr;

pub use bda_compute::{BDAComputeDiff, ComputeTask as BdaComputeTask};
pub use bda_immediate::{shader_bindings::RWMHAcceptRecord, BDADiff};
pub use resolution_uniform::INITIAL_RENDER_SIZE;
pub use target_distr::{NormalDistribution, TargetDistribution};

#[macro_export]
#[allow(unknown_lints, reason = "not a lint on stable...")]
#[allow(
    edition_2024_expr_fragment_specifier,
    reason = "Can't be fixed on stable"
)]
macro_rules! create_shader_module {
    ($shader_name:expr, $module_name: ident) => {
        #[allow(
            unused,
            elided_lifetimes_in_paths,
            clippy::needless_lifetimes,
            clippy::approx_constant,
            clippy::module_name_repetitions,
            clippy::pattern_type_mismatch,
            clippy::unreadable_literal,
            clippy::allow_attributes_without_reason,
            reason = "autogenerated"
        )]
        pub mod $module_name {
            include!(concat!(
                env!("OUT_DIR"),
                "/shaders_bindings/",
                $shader_name,
                ".rs"
            ));
            pub use bind_groups::*;
        }
    };
    ($shader_name:expr, $module_name: ident; no redefine) => {
        #[allow(
            unused,
            elided_lifetimes_in_paths,
            clippy::approx_constant,
            clippy::module_name_repetitions,
            clippy::pattern_type_mismatch,
            clippy::unreadable_literal,
            clippy::allow_attributes_without_reason,
            reason = "Autogenerated"
        )]
        pub mod $module_name {
            include!(concat!(
                env!("OUT_DIR"),
                "/shaders_bindings/",
                $shader_name,
                ".rs"
            ));
        }
    };
    ($shader_name:expr) => {
        create_shader_module!($shader_name, shader_bindings);
    };
}

create_shader_module!("fullscreen_quad.vertex", fullscreen_quad; no redefine);
