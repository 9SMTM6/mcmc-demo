[workspace]
resolver = "2"
members = ["executable", "macros", "shared"]
default-members = ["executable"]

[workspace.package]
authors = ["Samuel Maier <9smtm6@gmail.com>"]
version = "0.2.0-dev"
# NOTE: This is a virtual package!!!
# https://doc.rust-lang.org/nightly/edition-guide/rust-2024/cargo-resolver.html
edition = "2024"
license = "MIT OR Apache-2.0"

[profile.release]
# note the override of packages!!!
opt-level = 2 # fast and small wasm
# opt-level = 3 # fast
# opt-level = "s" # small binary
# opt-level = "z" # small binary + no loop vectorization
# see: https://fasterthanli.me/articles/why-is-my-rust-build-so-slow#link-time-optimization-lto
# lto = "thin"
# lto = "fat"
# codegen-units = 1
# panic = "abort"
# strip = true

# Optimize all dependencies even in debug builds:
[profile.dev.package."*"]
opt-level = 2

# Results of some experiments with above options and wasm size on nightly-2024-10-15:
# Slim compressed version is largely not influenced. 
# It goes between 1.3 MB and 1.2 MB, 1.2.
# Fat version is more influenced, it goes between 2.1 MB and 1.7 MB
# Lowest size generally achieved at opt=z + LTO=fat, though often opt=s comes close too.

[patch.crates-io]
# the release on patched branches MUST match the set version above, otherwise cargo will ignore this (it will warn about it though).

# If you want to use the bleeding edge version of egui and eframe:
# The released egui regularly lags behind in wgpu versions, if this is relevant, re-add the patch.
# egui = { git = "https://github.com/emilk/egui", branch = "master" }
# eframe = { git = "https://github.com/emilk/egui", branch = "master" }
wgpu-profiler = { git = "https://github.com/9SMTM6/wgpu-profiler", branch = "support_multi_queue" }

# wgsl_to_wgpu = { path = "../wgsl_to_wgpu/wgsl_to_wgpu" }

# If you fork https://github.com/emilk/egui you can test with:
# egui = { path = "../egui/crates/egui" }
# eframe = { path = "../egui/crates/eframe" }

[workspace.dependencies]
macros = { path = "./macros" }
shared = { path = "./shared" }

[workspace.lints.rust]
unsafe-op-in-unsafe-fn = "warn"
let_underscore_drop = "deny"
rust_2018_idioms = { level = "warn", priority = -1 }
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable, rust_analyzer)'] }
# unstable
# must_not_suspend = "deny"

[workspace.lints.clippy]
all = { level = "warn", priority = -1 }
allow_attributes_without_reason = "warn"
branches_sharing_code = "warn"
checked_conversions = "warn"
cognitive_complexity = "warn"
dbg_macro = "warn"
# "warn_on_ci"
expl_impl_clone_on_copy = "deny"
float_cmp = "warn"
fn_params_excessive_bools = "warn"
indexing_slicing = "warn"
manual_ok_or = "warn"
missing_const_for_fn = "warn"
missing_errors_doc = "warn"
missing_panics_doc = "warn"
module_name_repetitions = "warn"
multiple_crate_versions = "warn"
needless_borrowed_reference = "allow"
needless_pass_by_value = "warn"
no_effect_underscore_binding = "warn"
pattern_type_mismatch = "warn"
rc_buffer = "warn"
redundant_else = "warn"
semicolon_if_nothing_returned = "warn"
separated_literal_suffix = "warn"
shadow_unrelated = "warn"
struct_excessive_bools = "warn"
# todo = "warn"
# "warn_on_ci"
undocumented_unsafe_blocks = "warn"
unnested_or_patterns = "warn"
unreadable_literal = "warn"
# unwrap_used = "warn"
# "warn_on_ci"
used_underscore_binding = "warn"
