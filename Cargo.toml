[package]
name = "mcmc-demo"
version = "0.1.0"
authors = ["Samuel Maier <9smtm6@gmail.com>"]
edition = "2021"
include = ["LICENSE-APACHE", "LICENSE-MIT", "**/*.rs", "Cargo.toml"]

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]

[features]
default = [
    "all_rngs",
    "backend_panel",
    "performance_profile",
    "shipped_fonts",
    "tracing",
    "x11",
    "persistence",
    "dependency_logs",
]
## Get a backend planel, that reports frametimes, renderer information, and debug settings for egui.
## Ported pretty straight from the demo application.
backend_panel = []
## Native: Enable data collection or profiling with puffer, with a button in the backend_panel that starts said profiler.
## Web: Record tracing events and spans to the performance API.
performance_profile = [
    "backend_panel",
    "dep:puffin",
    "dep:puffin_http",
    "eframe/puffin",
]
## Enable checkpoint saving of (some of the) state.
## Has considerable influence on binary size because of embedded serializations (field names etc).
persistence = [
    "eframe/persistence",
    "nalgebra/serde-serialize",
    "rand/serde1",
    "rand_chacha/serde1",
    "rand_distr/serde1",
    "rand_pcg/serde1",
    "rand_xorshift/serde1",
    "rand_xoshiro/serde1",
    # not needed currently.
    # "wgpu/serde",
    "dep:serde",
]
## doesnt work, since it can't translate storagebuffers.
## And my experiments with passing stuff via textures was not successful.
# webgl_compat = ["wgpu/webgl"]
## Support layers for x11 on Linux. Wayland is always supported.
x11 = ["eframe/x11"]
shipped_fonts = ["eframe/default_fonts"]
## This has a considerable influence on wasm binary size
## It not just enables required dependencies to handle tracing,
## but also enables tracing and logging in dependencies,
## as well as enabling a bunch of debug macros to be able to record structural data.
tracing = [
    # Tracing is always enabled, to be able to use tracing macros for logs etc.
    # This has been observed not to make a huge difference in wasm size.
    # Otherwise it becomes a pain to manage the differences between tracing and log macros.
    # "dep:tracing",
    "dep:tracing-log",
    "dep:tracing-subscriber",
    "dep:tracing-web",
    "dep:time",
    "dependency_logs",
    "more_debug_impls",
]
## Add logs for dependencies
dependency_logs = [
    "rand/log",
    # needs tokio_unstable cfg flag.
    "tokio/tracing",
]
## More debug impls. ATM only interesting in connection with tracing.
more_debug_impls = ["dep:educe"]
all_rngs = [
    "rng_pcg",
    # "rng_small",
    "rng_xorshift",
    "rng_xoshiro",
    "rng_chacha",
]
rng_pcg = ["dep:rand_pcg"]
rng_chacha = ["dep:rand_chacha"]
rng_xoshiro = ["dep:rand_xoshiro"]
rng_xorshift = ["dep:rand_xorshift"]
## Add tokio-console for debugging. Native only.
tokio_console = ["dep:console-subscriber", "tokio/tracing"]
# rng_small = ["rand/small_rng"]
# wgpu_trace = [
#     # Note that this is NOT a tokio-trace trace.
#     # "temporarily removed". Reinstatement issue: https://github.com/gfx-rs/wgpu/issues/5974
#     "wgpu/trace",
# ]

[dependencies]
bytemuck = { version = "1.16.0" }
# fixes linking issue https://github.com/rust-embedded/critical-section/issues/41
# Upstream fix PR: https://github.com/embassy-rs/embassy/pull/3312
# can be removed after that is released.
# Can't do this with a patch on embassy-executor, since that would require all embassy-* crates to be patched, and this is easier to follow.s
eframe = { version = "0.29", default-features = false, features = [
    "wgpu",
    "wayland",
] }
egui = "0.29"
getrandom = { version = "0.2.15", features = ["js"] }
nalgebra = { version = "0.33.0" }
puffin = { version = "0.19.0", optional = true }
puffin_http = { version = "0.16.0", optional = true }
rand = { version = "0.8.5", default-features = false, features = ["std"] }
rand_chacha = { version = "0.3.1", optional = true }
rand_distr = "0.4.3"
rand_pcg = { version = "0.3.1", optional = true }
rand_xorshift = { version = "0.3.0", optional = true }
rand_xoshiro = { version = "0.6.0", optional = true }
serde = { version = "1", features = ["derive"], optional = true }
time = { version = "0.3.36", features = ["wasm-bindgen"], optional = true }
tracing = { version = "0.1.40", features = [
    # emit log messages if no tracing subscriber is enabled
    "log",
] }
tracing-log = { version = "0.2.0", optional = true }
tracing-subscriber = { version = "0.3.18", optional = true, features = [
    "env-filter",
    "fmt",
    "time",
] }
type-map = "0.5.0"
wasm_thread = { version = "0.3.0", default-features = false, features = [
    "es_modules",
] }
wgpu = { version = "22.1", features = ["webgpu"] }
tokio = { version = "1.40.0", default-features = false, features = [
    "sync",
    "macros",
    "rt",
] }
wasm-bindgen-futures = "0.4.43"
rayon = "1.10.0"
educe = { version = "0.6.0", default-features = false, features = [
    "Debug",
], optional = true }
futures = { version = "0.3.30", default-features = false, features = [
    "executor",
] }

# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
console-subscriber = { version = "0.4.0", optional = true }
env_logger = "0.11.5"
tokio = { version = "*", features = ["rt-multi-thread"] }

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = "0.1.7"
tracing-web = { version = "0.1.3", optional = true }
web-sys = { version = "0.3.69" }
wasm-bindgen = "0.2.92"
wasm-bindgen-rayon = { version = "1.2.1", features = ["no-bundler"] }

[build-dependencies]
miette = { version = "7.2.0", features = ["fancy"] }
regex = "1.10.6"
wgsl_bindgen = "0.15"
wgsl_to_wgpu = "0.10.1"

[dev-dependencies]
tokio = { version = "*", features = ["time"] }

[profile.release]
opt-level = 2 # fast and small wasm
# opt-level = "z" #note the override of packages
# see: https://fasterthanli.me/articles/why-is-my-rust-build-so-slow#link-time-optimization-lto
# lto = "thin"
# codegen-units = 1
# panic = "abort"
# strip = true

# Optimize all dependencies even in debug builds:
[profile.dev.package."*"]
opt-level = 2

[patch.crates-io]
# the release on patched branches MUST match the set version above,# otherwise cargo will ignore this (it will warn about it though).

# If you want to use the bleeding edge version of egui and eframe:
# The released egui regularly lags behind in wgpu versions, if this is relevant, re-add the patch.
# egui = { git = "https://github.com/emilk/egui", branch = "master" }
# eframe = { git = "https://github.com/emilk/egui", branch = "master" }

# Patches out a polyfill, since I need way more modern browsers anyways.
# Upstream PR: https://github.com/chemicstry/wasm_thread/pull/26
wasm_thread = { git = "https://github.com/9SMTM6/wasm_thread", branch = "configurable_polyfill" }
wasm-bindgen-rayon = { git = "https://github.com/9SMTM6/wasm-bindgen-rayon.git", branch = "update-deps-fix-thread-local" }
# wgsl_to_wgpu = { path = "../wgsl_to_wgpu/wgsl_to_wgpu" }
# wgpu = { git = "https://github.com/9smtm6/wgpu", branch = "patched" }

# If you fork https://github.com/emilk/egui you can test with:
# egui = { path = "../egui/crates/egui" }
# eframe = { path = "../egui/crates/eframe" }

[lints.rust]
unsafe-op-in-unsafe-fn = "warn"
let_underscore_drop = "deny"
rust_2024_compatibility = { level = "warn", priority = -1 }
rust_2018_idioms = { level = "warn", priority = -1 }
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
# unstable
# must_not_suspend = "deny"

[lints.clippy]
all = { level = "warn", priority = -1 }
allow_attributes_without_reason = "warn"
branches_sharing_code = "warn"
checked_conversions = "warn"
cognitive_complexity = "warn"
dbg_macro = "warn"
# "warn_on_ci"
expl_impl_clone_on_copy = "deny"
float_cmp = "warn"
fn_params_excessive_bools = "warn"
indexing_slicing = "warn"
manual_ok_or = "warn"
missing_const_for_fn = "warn"
missing_errors_doc = "warn"
missing_panics_doc = "warn"
module_name_repetitions = "warn"
multiple_crate_versions = "warn"
needless_borrowed_reference = "allow"
needless_pass_by_value = "warn"
no_effect_underscore_binding = "warn"
pattern_type_mismatch = "warn"
rc_buffer = "warn"
redundant_else = "warn"
semicolon_if_nothing_returned = "warn"
separated_literal_suffix = "warn"
shadow_unrelated = "warn"
struct_excessive_bools = "warn"
# todo = "warn"
# "warn_on_ci"
undocumented_unsafe_blocks = "warn"
unnested_or_patterns = "warn"
unreadable_literal = "warn"
# unwrap_used = "warn"
# "warn_on_ci"
used_underscore_binding = "warn"
